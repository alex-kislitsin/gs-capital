<?php

namespace app\models;

use Yii;
use yii\db\Query;

/**
 * This is the model class for table "betting".
 *
 * @property int $catalog_id Лот
 * @property int $user_id Пользователь
 * @property float $bet Ставка
 * @property int $date Дата и время ставки
 *
 * @property Catalog $catalog
 * @property Users $user
 */
class Betting extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'betting';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            ['date', 'filter', 'filter' => function () {
                return $this->isNewRecord ? time() : $this->date;
            }],
            ['bet', 'filter', 'filter' => function () {
                if (!$item = Catalog::findOne($this->catalog_id)) {
                    $this->addError('bet', 'Товар не найден.');
                    return false;
                }
                if (!$item->isStart()) {
                    $this->addError('bet', 'Аукцион по данному товару еще не начался.');
                }
                if ($item->isFinished()) {
                    $this->addError('bet', 'Аукцион по данному товару уже закончился.');
                }
                if ($item->user_id === $this->user_id) {
                    $this->addError('bet', 'Ваша ставка последняя.');
                }
                return $item->bet;
            }],
            [['catalog_id', 'user_id', 'bet'], 'required'],
            [['catalog_id', 'user_id', 'date'], 'integer'],
            [['bet'], 'number'],
            [['catalog_id', 'user_id', 'bet', 'date'], 'unique', 'targetAttribute' => ['catalog_id', 'user_id', 'bet', 'date']],
            [['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => Users::class, 'targetAttribute' => ['user_id' => 'id']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'catalog_id' => 'Лот',
            'user_id' => 'Пользователь',
            'bet' => 'Ставка',
            'date' => 'Дата и время ставки',
        ];
    }

    /**
     * Gets query for [[Catalog]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getCatalog()
    {
        return $this->hasOne(Catalog::class, ['id' => 'catalog_id']);
    }

    /**
     * Gets query for [[User]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(Users::class, ['id' => 'user_id']);
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

        $sum = (new Query())
            ->from(self::tableName())
            ->where(['catalog_id' => $this->catalog_id])
            ->sum('bet');
        if ($sum) {
            $this->catalog->user_id = $this->user_id;
            $this->catalog->cost = $sum;
            $this->catalog->date_end += $this->catalog->add_time;
            $this->catalog->save();
        }
    }
}
